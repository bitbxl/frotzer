name: Frotzer_CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # CONSTANTS
  GIST_ID: 554394d67973a35b66f7b60a24fa0950
  # build badge
  build_filename: frotzer-build.json
  build_label: Build
  build_success_color: success
  build_fail_color: critical
  # test badge
  test_filename: frotzer-test.json
  test_label: Tests
  test_success_color: success
  test_fail_color: critical
  # coverage badge
  coverage_filename: frotzer-coverage.json
  coverage_label: Coverage
  coverage_color: informational
  # dfrotz version badge
  dfversion_filename: frotzer-dfver.json
  dfversion_label: dfrotz
  dfversion_color: blueviolet

jobs:

  build:
    name: Build (${{ matrix.os }})

    runs-on: ${{ matrix.os }}

    env:
      # (Initial) status (to be checked and/or set at each job run)
      build_color: success
      build_status: OK
      test_color: success
      test_status: passing
      coverage_value: N/A
      dfversion_value: N/A

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]

    steps:
      - name: Clone repositories
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build dumb frotz and frotzer deps on ${{ matrix.os }}
        run: |
          make -C frotz/ dumb

      # runs only if build fails (and build status is OK)
      - name: Set build badge values
        if: ${{ failure() && env.build_status=='OK' }}
        run: |
          echo "build_status=NOK" >> $GITHUB_ENV
          echo "build_color=${{ env.build_fail_color }}" >> $GITHUB_ENV
          echo "test_status=failing" >> $GITHUB_ENV
          echo "test_color=${{ env.test_fail_color }}" >> $GITHUB_ENV

      - name: Test frotzer on ${{ matrix.os }}/${{ matrix.node-version }}
        if: ${{ success() }}
        run: |
          npm ci
          npm run docs
          echo "dfversion_value=$(npm run --silent version:dfrotz)" >> $GITHUB_ENV
          echo "coverage_value=$(npm run --silent test:coverage)" >> $GITHUB_ENV

      - name: Set test badge values
        if: ${{ failure() &&  env.test_status=='passing'}}
        run: |
          echo "test_status=failing" >> $GITHUB_ENV
          echo "test_color=${{ env.test_fail_color }}" >> $GITHUB_ENV
          echo "coverage_value=N/A" >> $GITHUB_ENV

      - name: Publish build badge
        if: ${{ always() }}
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_ID }}
          filename: ${{ env.build_filename }}
          label: ${{ env.build_label }}
          message: ${{ env.build_status }}
          color: ${{ env.build_color }}

      - name: Publish coverage badge
        if: ${{ always() }}
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_ID }}
          filename: ${{ env.coverage_filename }}
          label: ${{ env.coverage_label }}
          message: ${{ env.coverage_value }}
          color: ${{ env.coverage_color }}

      - name: Publish dfrotz version badge
        if: ${{ always() }}
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_ID }}
          filename: ${{ env.dfversion_filename }}
          label: ${{ env.dfversion_label }}
          message: ${{ env.dfversion_value }}
          color: ${{ env.dfversion_color }}
